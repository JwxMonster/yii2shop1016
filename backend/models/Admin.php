<?php
/**
 * Created by PhpStorm.
 * User: HXD
 * Date: 2018/3/2
 * Time: 16:55
 */

namespace backend\models;


use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

//先实现一个认证接口类
class Admin extends ActiveRecord implements IdentityInterface
{

    public $password;//明文密码

    public $roles=[];//用户角色

    //处理状态
    public static $status_options=[
        1=>'启用',0=>'禁用'
    ];

    //定义场景常量
    const SCENARIO_ADD='add';

    public function rules()
    {
        return [
            [['username','email'],'required'],
            ['password','required','on'=>self::SCENARIO_ADD],
            //密码长度6-32位
            ['password','string','length'=>[6,32],'tooShort'=>'密码太短了'],
            [['status', 'create_at', 'updated_at', 'last_login_time'], 'integer'],
            [['username', 'password_hash', 'password_reset_token', 'email'], 'string', 'max' => 255],
            [['auth_key'], 'string', 'max' => 32],
            [['last_login_ip'], 'string', 'max' => 15],
            //unique唯一的
            [['username'], 'unique'],
            [['email'], 'unique'],
            [['email'], 'email'],
            [['roles'], 'safe'],
            [['password_reset_token'], 'unique'],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用户名',
            'auth_key' => 'Auth Key',
            'password_hash' => 'Password Hash',
            'password_reset_token' => 'Password Reset Token',
            'email' => 'Email',
            'status' => '状态',
            'create_at' => 'Create At',
            'updated_at' => 'Updated At',
            'last_login_time' => 'Last Login Time',
            'last_login_ip' => 'Last Login Ip',
        ];
    }

    //保存前做的事
    //此方法是重写父类方法
    public function beforeSave($insert)
    {
        //$insert的类型是bool  表示是否是添加
        //save分两种情况   添加  和   修改   通过isNewRecord属性判断
        if($insert){
            //添加  密码加密 添加时间 auth_key随机生成
            $this->create_at=time();
            $this->auth_key=\Yii::$app->security->generateRandomString();//生成随机字符串
            $this->password_hash=\Yii::$app->security->generatePasswordHash($this->password);
        }else{
            //修改
            $this->updated_at=time();
            if($this->password){
                $this->password_hash=\Yii::$app->security->generatePasswordHash($this->password);
            }
        }
        return parent::beforeSave($insert); //必须要返回父类的方法，该方法必须返回true  save()方法才会继续执行，在过滤器中也有个before action，
    }

    //给用户关联权限
    public function afterSave($insert, $changedAttributes)
    {
        if($this->roles){
            $authManager=\Yii::$app->authManager;
            $authManager->revokeAll($this->id);
            foreach ($this->roles as $roleName){
                $role=$authManager->getRole($roleName);
                if($role)$authManager->assign($role,$this->id);
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Finds an identity by the given ID.
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface the identity object that matches the given ID.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */

    //根据ID查找当前用户的实例
    public static function findIdentity($id)
    {
        return self::findOne(['id'=>$id]);
    }

    /**
     * Finds an identity by the given token.
     * @param mixed $token the token to be looked for
     * @param mixed $type the type of the token. The value of this parameter depends on the implementation.
     * For example, [[\yii\filters\auth\HttpBearerAuth]] will set this parameter to be `yii\filters\auth\HttpBearerAuth`.
     * @return IdentityInterface the identity object that matches the given token.
     * Null should be returned if such an identity cannot be found
     * or the identity is not in an active state (disabled, deleted, etc.)
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    /**
     * Returns an ID that can uniquely identify a user identity.
     * @return string|int an ID that uniquely identifies a user identity.
     */

    //返回当前用户的ID
    public function getId()
    {
       return $this->id;
    }

    /**
     * Returns a key that can be used to check the validity of a given identity ID.
     *
     * The key should be unique for each individual user, and should be persistent
     * so that it can be used to check the validity of the user identity.
     *
     * The space of such keys should be big enough to defeat potential identity attacks.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @return string a key that is used to check the validity of a given identity ID.
     * @see validateAuthKey()
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * Validates the given auth key.
     *
     * This is required if [[User::enableAutoLogin]] is enabled.
     * @param string $authKey the given auth key
     * @return bool whether the given auth key is valid.
     * @see getAuthKey()
     */
    public function validateAuthKey($authKey)
    {
        return $authKey==$this->auth_key;
    }
}